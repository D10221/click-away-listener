{"version":3,"sources":["../../src/index.tsx","serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","classNames","names","filter","join","Icon","label","value","className","role","aria-label","aria-hidden","App","useState","away","setAway","back","onClickAway","id","_","Object","assign","setTimeout","href","one","src","alt","width","two","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2XAcA,IAAM,EAAgB,SAAC,GAAD,OACnB,GAAQ,EAAK,eAAkB,UAsEnB,MA3DqC,YAK7C,IAJL,EAIG,EAJH,YACA,EAGG,EAHH,SAGS,EAAN,EADH,iBACG,MADS,YACT,IACoB,wBAA4B,GAD1C,EAAN,iBACI,EADJ,KACS,EADT,KA+BH,qBAAU,kBAAO,GAzBf,SAAiB,GACb,IAAE,EAAQ,EAAc,GAKtB,EAAS,SAAC,GACd,IAAI,EAAM,iBAAV,CACA,IAAM,EAAK,sBAAY,GACjB,EAAM,EAAc,GAExB,GACA,EAAI,iBACJ,EAAI,gBAAgB,SAAS,EAAM,UAjCtB,SAAf,EAAgB,EAA8B,GAChD,QAAa,OAAX,IAAmB,EAAO,cACrB,IAAO,GAAU,EAAa,EAAI,EAAO,aAgC3C,CAAa,EAAI,EAAM,SAExB,EAAY,KAMZ,OAFA,EAAE,iBAAiB,EAAW,GAE3B,kBAAM,EAAM,oBAAoB,EAAW,IAG5B,CAAU,SAAS,KAE3C,IAAM,EAAe,IAAM,SAAS,KAAK,GACzC,OAAK,IAAM,eAAe,GAInB,IAAM,aAAa,E,yWAAnB,IACF,EAAa,MADX,CAML,IAAK,SAAgB,GAMzB,IAAgB,EALV,EAAQ,IAKE,EAJC,IAKuB,oBAAlB,EAAU,KALA,EAAa,IAAI,QAX7C,QAAQ,KAAK,8BAA+B,GACrC,OCvDSA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPN,SAASC,IAAsB,IAAD,uBAAPC,EAAO,yBAAPA,EAAO,gBAC5B,OAAOA,EAAMC,OAAOP,SAASQ,KAAK,KAGpC,IAAMC,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACX,0BACEC,UAAU,OACVC,KAAK,MACLC,aAAYJ,GAAS,GACrBK,eAAcf,QAAQU,IAErBC,IAIL,SAASK,IAAO,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,KAEPC,EAAO,GAEb,SAASC,EAAYC,GACnB,OAAO,SAAAC,GAELC,OAAOC,OAAOP,EAAdM,OAAA,IAAAA,CAAA,GAAuBF,GAAK,IAC5BE,OAAOC,OAAOL,EAAdI,OAAA,IAAAA,CAAA,GAAuBF,GAAK,IAK5BI,YAJA,WACEP,EAAQ,eAAKD,IACbQ,YAAW,kBAAMP,EAAQC,KAAO,OAEhB,KAItB,OACE,oCACE,gCACE,6BACE,uBAAGO,KA1CG,iDA0CY,wBAAIf,UAAU,gBAAd,0BAGtB,8BACE,kBAAC,EAAD,CAAWS,YAAaA,EAAY,QAClC,yBACEC,GAAG,MACHV,UAAWP,EAAW,YAAaa,EAAKU,KAAO,SAE/C,yBAAKC,IAhDJ,aAgDejB,UAAU,OAAOkB,IAAI,OAAOC,MAAM,UAClD,uCAGJ,kBAAC,EAAD,CAAWV,YAAaA,EAAY,QAClC,yBACEC,GAAG,MACHV,UAAWP,EAAW,YAAaa,EAAKc,KAAO,SAE/C,yBAAKH,IAzDJ,aAyDejB,UAAU,OAAOkB,IAAI,OAAOC,MAAM,UAClD,uCAGJ,4CAEF,gCACE,yBAAKnB,UAAU,eACb,kBAAC,EAAD,CAAMF,MAAM,WAAWC,MAAO,iBAAQ,uBAAGgB,KAlEjC,wDAkE8B,eAOjCX,YAEfiB,IAASC,OAAO,kBAAClB,EAAD,MAASmB,SAASC,eAAe,SDiD3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c5150c3f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { findDOMNode } from \"react-dom\";\nconst ownerDocument = (node) => (node && node.ownerDocument) || document;\nconst isDescendant = (el, target) => {\n    if (target !== null && target.parentNode) {\n        return el === target || isDescendant(el, target.parentNode);\n    }\n    return false;\n};\n/**\n * Listen for pointerup events outside of the component children.\n */\nconst ClickAwayListener = ({ onClickAway, children, \n/** jsdom can't see pointerup */\neventType = \"pointerup\", }) => {\n    const [ref, _setRef] = useState(undefined);\n    /**\n     * @description addEventListener to owner document\n     * @returns {()=> any} Unsubscribe\n     */\n    function subscribe(ref) {\n        const owner = ownerDocument(ref);\n        /**\n         * Handle Event\n         * @param event\n         */\n        const handle = (event) => {\n            if (event.defaultPrevented)\n                return;\n            const el = findDOMNode(ref);\n            const doc = ownerDocument(el);\n            if (doc &&\n                doc.documentElement &&\n                doc.documentElement.contains(event.target) &&\n                !isDescendant(el, event.target)) {\n                onClickAway(event);\n            }\n        };\n        owner.addEventListener(eventType, handle);\n        /** Unsubscribe */\n        return () => owner.removeEventListener(eventType, handle);\n    }\n    /** subscribe/unsubscibe on e/render */\n    useEffect(() => (ref && subscribe(ref)) || undefined);\n    const onlyChildren = React.Children.only(children);\n    if (!React.isValidElement(onlyChildren)) {\n        console.warn(\"Children: !isValidElement: \", onlyChildren);\n        return null;\n    }\n    return React.cloneElement(onlyChildren, {\n        ...onlyChildren.props,\n        /**\n         * set local ref and bubble up ....\n         * @param value\n         */\n        ref: function setRef(value) {\n            _setRef(value);\n            if (hasRef(onlyChildren))\n                onlyChildren.ref(value);\n        },\n    });\n};\nfunction hasRef(x) {\n    return x && typeof x.ref === \"function\";\n}\nexport default ClickAwayListener;\n//# sourceMappingURL=index.js.map","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ClickAway from \"@d10221/click-away-listener\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n/** */\nconst repoUrl = \"https://github.com/D10221/click-away-listener\";\n/** */\nconst issuesUrl = \"https://github.com/D10221/click-away-listener/issues\";\nconst logo = \"./logo.svg\";\n\n/** */\nfunction classNames(...names) {\n  return names.filter(Boolean).join(\" \");\n}\n/** */\nconst Icon = ({ label, value }) => (\n  <span\n    className=\"icon\"\n    role=\"img\"\n    aria-label={label || \"\"}\n    aria-hidden={!Boolean(label)}\n  >\n    {value}\n  </span>\n);\n/** */\nfunction App() {\n  const [away, setAway] = useState({});\n  const back = {};\n  /** */\n  function onClickAway(id) {\n    return _ => {\n      // ...buffering \n      Object.assign(away, { [id]: true });\n      Object.assign(back, { [id]: false });\n      function blink() {\n        setAway({ ...away });\n        setTimeout(() => setAway(back), 500)\n      }\n      setTimeout(blink, 10);\n\n    };\n  }\n  return (\n    <>\n      <header>\n        <nav>\n          <a href={repoUrl}><h1 className=\"header-title\">Click Away Listener</h1></a>\n        </nav>\n      </header>\n      <main>\n        <ClickAway onClickAway={onClickAway(\"one\")}>\n          <div\n            id=\"one\"\n            className={classNames(\"container\", away.one && \"away\")}\n          >\n            <img src={logo} className=\"logo\" alt=\"logo\" width=\"150px\" />\n            <span>One</span>\n          </div>\n        </ClickAway>\n        <ClickAway onClickAway={onClickAway(\"two\")}>\n          <div\n            id=\"two\"\n            className={classNames(\"container\", away.two && \"away\")}\n          >\n            <img src={logo} className=\"logo\" alt=\"logo\" width=\"150px\" />\n            <span>Two</span>\n          </div>\n        </ClickAway>\n        <p>Click Around</p>\n      </main>\n      <footer>\n        <div className=\"footer-item\">\n          <Icon label=\"Feedback\" value={\"💬\"} /><a href={issuesUrl}>Feedback</a>\n        </div>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}